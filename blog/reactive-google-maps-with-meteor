<!doctype html>
<html class="no-js" lang="nl">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Reactive Google maps with Meteor - Stephan van Opstal</title>
        <link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/blog/feed.xml" />
        <meta name="description" content="Stephan van Opstal is a freelance Front-end Developer specialized in RWD and HTML/CSS.">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="/stylesheets/blog/blog.css">
        <link rel="stylesheet" href="/stylesheets/blog/solarized_light.css">
</head>
<body class="blog">

    <nav class="nav">
        <a href="/" class="home">Home</a>
        <ol>
            <li><a href="/blog">Articles</a></li>
            <li><a href="/">Portfolio</a></li>
        </ol>
    </nav>

        <article class="blog__article" role="main" itemscope itemtype="http://schema.org/BlogPosting">
        <h1 itemprop="name">Reactive Google maps with Meteor</h1>
        <p>In this article we are going to create a list of places that updates while the user navigates a Google map. It will only show places from the database that are within the visible area of the Google map.</p>

<p>We&#39;ll use the <a href="https://atmospherejs.com/dburles/google-maps">dburles:google-maps</a> package that&#39;s makes it easy for us to include a map in our template.</p>

<p>Find the full code example on <a href="http://www.github.com/st3phan/meteor-reactive-googlemaps-example">GitHub</a>. The demo can be found  <a href="http://reactive-googlemaps-example.meteor.com">here</a>.</p>

<p>First add the required package by running the following command in your terminal.</p>

<pre><code>meteor add dburles:google-maps
</code></pre>

<p>Create the Places collection. Note that this line is not wrapped in a <code>isClient</code> or <code>isServer</code> function because we need the collection on both client as server side.</p>

<pre><code class="javascript">Places = new Mongo.Collection(&#39;places&#39;);
</code></pre>

<p>Create an array with names and coordinates of some places and populate the database with it. Make sure this code lives only on the server by wrapping it in a <code>isServer</code> function.</p>

<pre><code class="javascript">if (Meteor.isServer) {
    Meteor.startup(function() {
        var data = [
            {
                &quot;name&quot;: &quot;Nieuwmarkt, Amsterdam&quot;,
                &quot;location&quot;: {
                    &quot;type&quot;: &quot;Point&quot;,
                    &quot;coordinates&quot;: {
                        &quot;lat&quot;: 52.372466,
                        &quot;lng&quot;: 4.900722
                    }
                }
            },
            // ... code removed for clarity ...
            {
                &quot;name&quot;: &quot;Ransdorp, Amsterdam&quot;,
                &quot;location&quot;: {
                    &quot;type&quot;: &quot;Point&quot;,
                    &quot;coordinates&quot;: {
                        &quot;lat&quot;: 52.392954,
                        &quot;lng&quot;: 4.993593
                    }
                }
            },
        ];

        if(!Places.find().count()) {
            _.each(data, function(place) {
                Places.insert({
                    name: place.name,
                    location: {
                        type: &#39;Point&#39;,
                        coordinates: [
                            place.location.coordinates.lat,
                            place.location.coordinates.lng
                        ]
                    }
                })
            });
        }
    });
}
</code></pre>

<p>Create a publication that returns the places that are within a box. When using <code>$geoWithin</code> with the <code>$box</code> operator, <code>$geoWithin</code> returns the places based on grid coordinates. The box variable will therefore hold an array with latitudes and longitudes of our box. More on this later.</p>

<pre><code class="javascript">if (Meteor.isServer) {

    // ... code removed for clarity ...

    Meteor.publish(&#39;places&#39;, function(box) {
        var find = {
            location: {
                $geoWithin: {
                    $box: box
                }
            }
        };

        return Places.find(find);
    });
}
</code></pre>

<p>Remove the autopublish package because otherwise our publication will always return all places from the database. We only need those visible in our box.</p>

<pre><code>meteor remove autopublish
</code></pre>

<p>Now on to the clientside code.</p>

<p>Create a template that will hold our map and the list of visible places.</p>

<pre><code class="html">&lt;template name=&quot;map&quot;&gt;
    &lt;div class=&quot;map&quot;&gt;
        {{&gt; googleMap name=&quot;map&quot; options=mapOptions}}
    &lt;/div&gt;
    &lt;ol class=&quot;places&quot;&gt;
        {{#each places}}
            &lt;li&gt;{{name}}&lt;/li&gt;
        {{/each}}
    &lt;/ol&gt;
&lt;/template&gt;
</code></pre>

<p>Load the Google maps assets and register an <code>onCreated</code> function to be called when an instance of our map template is created. Within this function we&#39;ll register another function which will check when our map is ready. <code>map</code> is the name of our map instance here.</p>

<pre><code class="javascript">if (Meteor.isClient) {
    Meteor.startup(function() {
        GoogleMaps.load();
    });

    Template.map.onCreated(function() {
        GoogleMaps.ready(&#39;map&#39;, function(map) {

        });
    });
}
</code></pre>

<p>For our template to work we&#39;ll need to create two helpers. <code>mapOptions</code> returns the options for the google map which centers on Amsterdam with a nice zoom level. <code>places</code> returns the data from the Places publication.</p>

<pre><code class="javascript">if (Meteor.isClient) {

    // ... code removed for clarity ...

    Template.map.helpers({
        mapOptions: function() {
            // Initialize the map
            if (GoogleMaps.loaded()) {
                return {
                    // Amsterdam city center coordinates
                    center: new google.maps.LatLng(52.370216, 4.895168),
                    zoom: 12
                };
            }
        },
        places: function() {
            return Places.find();
        }
    });
}
</code></pre>

<p>Next we want to know the coordinates of the visible area of our map (box). Because we&#39;ll be asking for these coordinates in multiple places we&#39;ll create a function for this. This function doesn&#39;t return anything but instead sets a Session variable which holds our coordinates. To use the <code>$box</code> operator in our mongo query, we must specify the bottom left and top right corners of the box in an array object.</p>

<pre><code class="javascript">if (Meteor.isClient) {

    // ... code removed for clarity ...

    function getBox() {
        var bounds = GoogleMaps.maps.map.instance.getBounds();
        var ne = bounds.getNorthEast();
        var sw = bounds.getSouthWest();
        Session.set(&#39;box&#39;, [[sw.lat(),sw.lng()], [ne.lat(),ne.lng()]]);
    }
}
</code></pre>

<p>For the places to actually show up on our map and list we need a subscription to our Places collection. We&#39;ll wrap this code in an <code>autorun</code> so that every time the Session variable with our coordinates changes we resubscribe to our collection using the updated box coordinates.</p>

<pre><code class="javascript">if (Meteor.isClient) {

    // ... code removed for clarity ...

    Template.map.onCreated(function() {
        var self = this;

        GoogleMaps.ready(&#39;map&#39;, function(map) {
            self.autorun(function() {
                getBox();
                Meteor.subscribe(&#39;places&#39;, Session.get(&#39;box&#39;));
            });
        });
    });

    // ... code removed for clarity ...
}
</code></pre>

<p>Now we that we have a subscription to our Places collection we can add the markers to our map. We&#39;ll check when our subscription is ready, then query our collection and finish with looping through the results and adding the markers. Note the <code>lookup</code> variable which holds an array of all the markers already added. This way we avoid duplicate markers on the map.</p>

<pre><code class="javascript">if (Meteor.isClient) {
    var lookup = [];

    // ... code removed for clarity ...

    Template.map.onCreated(function() {
        var self = this;

        GoogleMaps.ready(&#39;map&#39;, function(map) {
            self.autorun(function() {
                getBox();
                var handle = Meteor.subscribe(&#39;places&#39;, Session.get(&#39;box&#39;));
                if (handle.ready()) {
                    var places = Places.find().fetch();

                    _.each(places, function(place) {
                        var lat = place.location.coordinates[0];
                        var lng = place.location.coordinates[1];

                        if (!_.contains(lookup, lat+&#39;,&#39;+lng)) {
                            var marker = new google.maps.Marker({
                                position: new google.maps.LatLng(lat, lng),
                                map: GoogleMaps.maps.map.instance
                            });
                            lookup.push(lat+&#39;,&#39;+lng);
                        }
                    });
                }
            });
        });
    });

    // ... code removed for clarity ...
}
</code></pre>

<p>Now every time the box of our map changes (by zooming or dragging) we want the list of places next to our map to represent the visible places on our map.</p>

<p>Add the event listeners for the drag en zoom events and we&#39;re done.</p>

<pre><code class="javascript">if (Meteor.isClient) {

    // ... code removed for clarity ...

    Template.map.onCreated(function() {
        var self = this;

        GoogleMaps.ready(&#39;map&#39;, function(map) {

            // ... code removed for clarity ...

            google.maps.event.addListener(map.instance, &#39;dragend&#39;, function(e){
                 getBox();
            });

            google.maps.event.addListener(map.instance, &#39;zoom_changed&#39;, function(e){
                 getBox();
            });
        });
    });

    // ... code removed for clarity ...
}
</code></pre>

<p>Now play with zooming in and out and watch how our list represents the places visible on our map!</p>

        <footer><p>Published: <data itemprop="datePublished" value="2015-08-21">August 21, 2015</data>.</p></footer>
        <div class="blog__article__disqus">
            <div id="disqus_thread"></div>
<script type="text/javascript">
//<![CDATA[
                  var disqus_shortname = 'stephanvanopstal';
          
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
//]]>
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

        </div>
    </article>


    <script src="/javascripts/blog/all.js"></script>
    <script type="text/javascript">
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-878657-3', 'auto');
  ga('send', 'pageview');
</script>

  </body>
</html>
